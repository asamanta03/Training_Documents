Docker Certification Training 

14th Dec 2024 - Day-0
Weekends - 7AM - 10AM IST


Actual Training Start from 21st Dec. 2024 - 7AM-10AM IST

Lab Environment 


	Create AWS Cloud Free Tier Account

	https://aws.amazon.com/console/

		- Active Email_ID, Mobile Number and Credit/Debit(International Transaction Enabled) 
		
		- Account Type : Basic Free Account 
		
		- 12 Months free - tier account 
		
		
	GitHub Repository Access 
	
	https://github.com/
	
########################
Day - 1  21st Dec. 2024
########################

	- Lab Environments 
		AWS Cloud / Azure Cloud 
			- To Create VMs and install Docker Engine 
			
	- GitHub Account 
		https://github.com/
		
	- DockerHub Account (Container Registry)
		https://hub.docker.com/
		
Introduction to Containerization :::

	Containerization : 
			- It is a process of packaging the Application along with its dependencies.!
	
	What is Virtual Machines?
	
		- VMs are considered as Hardware Level Virtualization.
		- VMs are created using Hypervisor.
		- VMs are used to run the Operator System.
		- VMs will be up and running, even if there no Active Application/Task.
		- VMs consume more time and space to start.
	
	What is Container?
	
		- Containers are considered as OS Level Virtualization.
		- Containers are created using Container Engine.
		- Containers are used to run the Application/Task. Container are not used to run any operator System.
		- Containers will go to exit state if there no Active Application/Task.
		- Containers consume less time and space to start when compared to VMs.

		- Kernel - Core of any Operating System
			- Namespace & CGroup
			
		- Containers will run in its own dedicated and isolated Address space	
		
		Containers are just to reduce the no. of VMs 
		We cannot completely eliminate VM.
		
	
	Architecture:
	
		Jenkins :::
			
			Master/Slave Architecture :
			
			Jenkins_Master(VM) 		: 	Create Jenkins Jobs & Schedule 
			
				Jenkins_Slaves(VM) 	: 	Execute the Builds
				
			Jenkins_Master 		:: Jenkins CICD Pipeline Projects.
			
				Jenkins_Slave1	: Install jdk - Java Application Build 
				Jenkins_Slave2	: Install sdk - .Net Application Build
				Jenkins_Slave3	: Python
				Jenkins_Slave4	: NodeJS
				Jenkins_Slave5	: Ruby
				Jenkins_Slave6	: Angular
				
			Using Container:
			
			Jenkins_Master(VM)		:: Jenkins CICD Pipeline Projects.
			
				Jenkins_Slave(VM)	: 
						Install Container Engine 
							C1 	: Install jdk - Java Application Build 
							C2	: Install sdk - .Net Application Build
							C3  : Python
							C4  : NodeJS
							C5  : Ruby
							C6  : Angular
						
		
		
	Containerization : 
			- It is a process of packaging the Application along with its dependencies.!

		
		
	Environment:
	
		Java Application :
		
			3-Tier 	Appli Service - sign_module
			
				- Front-End Layer 		C1
				- Application Layer 	C2 
				- BackEnd - DataBase	C3
			

	Containers ::
		
		Infra-Structure Perspective :
			
			- Containers are used to reduce the no. of VMs and reduce the Infra-Structure Cost.
			Master/Slave Architecture :
			
				Jenkins_Master(VM) 		: 	Create Jenkins Jobs & Schedule 
				
					Jenkins_Slaves(VM) 	: 	Execute the Builds
					
				Jenkins_Master 		:: Jenkins CICD Pipeline Projects.
				
					Jenkins_Slave1	: Install jdk - Java Application Build 
					Jenkins_Slave2	: Install sdk - .Net Application Build
					Jenkins_Slave3	: Python
					Jenkins_Slave4	: NodeJS
					Jenkins_Slave5	: Ruby
					Jenkins_Slave6	: Angular
					
				Using Container:
				
				Jenkins_Master(VM)		:: Jenkins CICD Pipeline Projects.
				
					Jenkins_Slave(VM)	: 
							Install Container Engine 
								C1 	: Install jdk - Java Application Build 
								C2	: Install sdk - .Net Application Build
								C3  : Python
								C4  : NodeJS
								C5  : Ruby
								C6  : Angular
	
		Developers' Perspective :
		
			- Developers usd the Docker to package the Application along with its dependencies and deploy to the target Environments!
			
			Eg.: 
			
				mywebapp.war_v1.0
				
			Deploy mywebapp.war_v1.0 to QA,UAT,PROD
			
			
			Environments 
			
				Dev :
				
					java app code - using jdk11
					Unit Test -> Tomcat WAS - tomcat_v8
				
				Application Build :

					It is a process of compiling the source code & Creating Artifacts - Binaries (*.war/*.jar/*.exec)
					mywebapp.war_v1.0
					
					Package the Application Artifacts(binaries-*.war) with all its dependencies
					
					Docker CE : Package --> Image 
						
						mywebapp.war_v1.0	
						
						Create Application Container Image : (mywebapp.war_v1.0,jdk11,tomcat8) - mywebappimg:v1.0 
						
						Publish the Application Container Image (mywebappimg:v1.0) to Container Registry.
						
						Deployed (mywebappimg:v1.0) to the Target Environments
						
				
				Build 		mywebapp.war_v1.0
				
				QA (VM)			mywebapp.war_v1.0			(mywebappimg:v1.0) 
							--> Container Engine 
									- Run as Container							
				
				UAT			mywebapp.war_v1.0
				
				PROD 		mywebapp.war_v1.0
		
		
			Application Build 				# Application Build Tools like Maven/Gradle - Create *.war file
			
			Application Image Build 		# Docker Engine and Docker Cli Commands		- Create Image
		
			
	Terminologies :::
	
		- Container Engine ::
			- Is used to Create and Manage the Container Images and Containers.
				
		- Container Images ::
			- Images are the static file which defines the properties of Application and its dependencies. 
			- Images are Non-Executable
			- Images composed of various Layers and it can be created using Dockerfile Instruction.
			
		- Container :
			- Containers are the executable units of Container Image
			- Containers are used to run the applications that are defined in the container images.
			
		- Container Registry :		
			- Container Registry is used store and manage the Container Images.
			- DockerHub - https://hub.docker.com/	
			
		- Container Repositories :
			- Container Repositories are the subset of Container Registry
			
			Eg.: 
			github 			Docker-Hub_Registry
				repo1			Docker-hub_Repository1
				repo2			Docker-hub_Repository2	

		
		Managed Services from Cloud Service Providers
		
			AWS 	- ECS,ECR,EKS
			
			Azure	- ACS,ACR,AKS 
			
			GCP 	- GCE,GCR,GKE
	
Next ::
	
	Working with Docker :



########################
Day - 2  22nd Dec. 2024
########################

	Working with Docker ::
	
		AWS Cloud - Create EC2 Instance - Ubuntu
		
		AWS Free Account :
		
			https://aws.amazon.com/console/
		

		- Active Email_ID, Mobile Number and Credit/Debit(International Transaction Enabled) 
		
		- Account Type : Basic Free Account 
		
		- 12 Months free - tier account 
			
			
		Upon Registration, Login to AWS Console as a root user using Email_ID
		
		1 VM --> 750 Hrs/Month 
		
		10 VMs --> 75Hrs/Month 
		
		
		
		VMs are refered as EC2 Instances 
		
		EC2 Instances Dashboard!
		
		
		Launch EC2 Instance - ubuntu v22.04 AMI
		
		VM1 ------------------> VM2 
		
		User Authentication ::
		
			- password 
			- token 
			- keys --
			
			
		Connect to EC2 Instance :
		
			- EC2 Instance Connect -- using web browser.
			
			- Using SSH Agent	
				--> Putty
				--> MoboXterm			# https://mobaxterm.mobatek.net/download-home-edition.html
										# Choose MobaXterm Home Edition!
										# Download, Extract and Run the Exec to Install MobaXterm.
				
					- Host Name 
					- User Name 
					- *.pem			# Private Key
					
			- Terminal
			
		Login to AWS EC2 Instance :
		
		sudo -i 
		
		sudo apt update -y
		
		Install Docker!				# https://docs.docker.com/engine/install/
		
		sudo apt install docker.io -y
		
	Use Docker Cli Command to interact with Docker Engine
		
		docker --version
		
		docker images 				# Get the list of Container Images 
 		
		docker ps 					# Get the list of Active/Running Containers

		docker ps -a 				# Get the list of all Active/Running and stopped Containers
		
		docker pull					# Download the Container Image from Container Registry(DockerHub)		
		
		docker pull <image_name>
		
		
		docker run <image_name>		# To Create and run the Container based on the Image Name
		
		Three Modes of Container Execution/Run :
		
			- Foreground Mode/ Attached Mode 		
						# Terminal will be used by container, till the process completes, that termial will be blocked by that container
						
					docker run <image_name>
			
			- Background Mode / Detached Mode
						# Runs in background as a background process.
						
					docker run -d <image_name>
					
			- Interactive Mode 
						# Access the Container in Interactive Mode 
						
					docker run -it <image_name>
					
					exit						To Exit from container					
					
			docker stop <container_id>
			
			docker start <container_id>
			
			docker exec -it <container_id> bash		# To login to the running Container.
			
			
			Delete/Remove :
			
				docker rm <container_id> <container_id> 		# Remove the Container
				
				docker rmi <image_name>							# Remove the Image 
				
				docker rmi -f <image_name>						# Force Remote the Image 
		
		
			docker inspect <object_name>	
			
				docker inspect <container_id> 
				docker inspect <image_name>
				docker inspect <volume>
				
			docker history <image_name>
    1  apt update -y
    2  clear
    3  apt install docker.io -y
    4  docker --version
    5  clear
    6  docker images
    7  docker ps
    8  docker ps -a
    9  clear
   10  docker images
   11  docker pull centos
   12  docker images
   13  docker ps
   14  docker ps -a
   15  docker pull alpine
   16  docker images
   17  clear
   18  docker images
   19  docker run centos
   20  docker images
   21  docker ps
   22  docker ps -a
   23  docker run alpine
   24  docker ps
   25  docker ps -a
   26  clear
   27  docker ps
   28  docker ps -a
   29  docker images
   30  clear
   31  docker ps
   32  docker ps -a
   33  docker run centos sleep 10
   34  docker run centos sleep 20
   35  docker run -d centos sleep 20
   36  docker ps
   37  clear
   38  docker images
   39  docker ps -a
   40  docker run -it centos bash
   41  docker run centos sleep 200
   42  clear
   43  docker run --name=dummy centos
   44*
   45  docker images
   46  docker ps
   47  docker rmi centos
   48  docker rm 162eec0bd282
   49  docker ps -a
   50  docker rm 91831b0d2c31 d6e0555e480f
   51  docker images
   52  docker ps -a
   53  docker rmi centos
   54  docker rmi -f centos
   55  docker images
   56  clear
   57  docker ps -a
   58  docker inspect 6519a20a5337
   59  docker inspect ubuntu
   60  clear
   61  docker history ubuntu
   62* docker
   63  docker history 6519a20a5337
   64  clear
   65  docker run -it ubuntu bash
   66  clear
   67  history		


########################
Day - 3  4th Jan. 2024
########################

	Working with Various Types of Images
	
	OS Based Images 
	
	WAS Based Images 
	
	
	Docker Networking :
	
	Port Mapping / Port Binding 
	
		- Is used map the container port and the host port
		- This helps to container to expose to internet.
		- Enable to Host Port and map it with Container Port.
		
		Eg.: 
		
			-p <host_port>:<container_port>
			
		C1 	- 8080(container_port)		--> 8089(host_port)
		C2	- 3000(container_port)		--> 8088(host_port)
		C3	- 8080(container_port)		--> 8087(host_port)
		C4	- 8080(container_port)		--> 8086(host_port)
		C5	- 8080(container_port) 		--> 8085(host_port)
		
		
			VM -> Tomcat WAS 
			
				- Install Tomcat = 8080 at VM level
				
		docker run -it -p 8088:8080 tomcat:8.0
		
	
	Container Storage / Volumes :	
	
		3 - Tier Application Services :
		
		E_Commerce Portal :
		
		Sign_In-Page :
		
		- 3 - Tier Application Services
		
			- Front-End				# User Interaction 	--> C1 
				
			- Application Layer		# Business Logics 	--> C2 
			
			- Back-End Layer		# Data_Base			--> C3 
	
		Stateless Application :			
		
		Stateful Application :
		
			Volumes 
			
			Persistant Volumes. 
			
				- It is used to maintain the data even after lifetime of Containers
				
				
		Create Docker Volume :::
		
			docke volume list 
			
			docker volume create dc-vol1
			
			docker volume inspect dc-vol1	
			
			docker run -it --mount source=dc-vol1,destination=/dc-vol1 ubuntu bash
			
			

	Create Container Images ::::
	
	
		- docker commit 			# used by the Admins to prepare server templates 
		
				==> Create any New-Container Image based on the exist Container reference.
				
				Syntax:
					docker commit <Existing_Container_ID> <Container_Repository_Name><New_Image_Name>:<tag_name>
		
		
					docker commit e9dac7997b1e loksaieta/dcp-build-env:v1.0
					
					docker commit e9dac7997b1e team1/dcp-build-env:v1.0
					
					docker commit e9dac7997b1e team2/dcp-build-env:v1.0
		
				VM : Run Tomcat WAS 
				
					ubuntu - OS
					install jdk 
					setup environment varible - JAVA_HOME 
					install tomcat - 8080 port 
					start tomcat service 
					
		- docker build 				# used by the developers to prepare application Images 
		
				==> To create a new Container Image based on the Dockerfile reference.
				==> Dockerfile composed of Instructions to Create Docker Container Images
				==> Application Developers create the Dockerfile and update in the Source Code Repository. 

				1. Create Dockerfile 
				
				Syntax :
				
					docker build -t <Container_Repository_Name><New_Image_Name>:<tag_name> . 	"." Denotes the Dockerfile reference.	

   65  docker images
   66  docker ps -a
   67  clear
   68  docker images
   69  docker run -it tomcat:8.0 bash
   70  docker run -it -p 8088:8080 tomcat:8.0
   71  clear
   72  docker volume list
   73  docker volume create dc-vol1
   74  docker volume list
   75  clear
   76  docker volume list
   77  docker volume inspect dc-vol1
   78  cd /var/lib/docker/volumes/
   79  ls
   80  cd dc-vol1/
   81  ls
   82  clear
   83  cd _data/
   84  pwd
   85  docker images
   86  docker ps -a
   87  clear
   88  docker ps -a
   89  docker run -it ubuntu bash
   90  docker run -it --mount source=dc-vol1,destination=/dc-vol1 ubuntu bash
   91  docker ps -a
   92  docker rm e5d418299181
   93  docker run -it --mount source=dc-vol1,destination=/dc-vol1 ubuntu bash
   94  docker exec c02992fc7b42 -it --mount source=dc-vol1,destination=/dc-vol1 bash
   95  docker start c02992fc7b42
   96  docker exec c02992fc7b42 -it --mount source=dc-vol1,destination=/dc-vol1 bash
   97  docker exec -it c02992fc7b42 --mount source=dc-vol1,destination=/dc-vol1 bash
   98  clear
   99  cd ~
  100  clear
  101  docker ps
  102  docker exec -it c02992fc7b42 bash
  103  docker ps
  104  docker stop c02992fc
  105  docker ps
  106  docker ps -a
  107  clear
  108  docker ps -a
  109  docker images
  110  docker commit e9dac7997b1e loksaieta/dcp-build-env:v1.0
  111  docker images
  112  docker run -it loksaieta/dcp-build-env:v1.0 bash
  113  clear
  114  docker images
  115  docker run -it loksaieta/dcp-build-env:v1.0 bash
  116  docker ps
  117  docker ps -a
  118  docker start ad55358144f2
  119  docker log ad55358144f2
  120  docker logs ad55358144f2
  121  history



########################
Day - 4  5th Jan. 2024
########################

	- Docker Build ::::
	
		- docker build 				# used by the developers to prepare application Images 
		
				==> To create a new Container Image based on the Dockerfile reference.
				==> Dockerfile composed of Instructions to Create Docker Container Images
				==> Application Developers create the Dockerfile and update in the Source Code Repository. 

				1. Create Dockerfile 
				
				Syntax :
				
					docker build -t <Container_Repository_Name><New_Image_Name>:<tag_name> . 	"." Denotes the Dockerfile reference.


			CICD Pipelines : ==> --> jenkins/github actions/gitlab-ci/az-pipelines/aws code-pipeline / Bamboo
			
				Dev Environment:
					- Create Source Code, Dockerfile
					- Commit the Source Code to Source Code Repositories(Github/Gitlab/Az-Repo/AWS-CodeCommit)
				Build Environment
					- Application Build 		- Compile the Source Code & Create Artifacts (*.war)		- App Build Tools, SRC_Code
					- Application Image Build 	- Build Application Image using Docker (*.war,Dependencies) - Dockerfile
					- Push the Application Container Image to Container Registry. 
				Target - QA/UAT/PROD Environments
					- Pull Application Container Image from Container Registry. 
					
			Webpage - 
			
				- Various Test Scenarios ???
				
				- Test Environments
				
					webpage --> 

			
			Dockerfile is composed of various Instructions :
			
				1. Create Dockerfile

				vi Dockerfile
				
				FROM ubuntu 
				RUN apt update -y 
				RUN apt install git -y 
				RUN apt install maven -y
				
				docker build -t <Container_Repository_Name><New_Image_Name>:<tag_name> . 	"." Denotes the Dockerfile reference.		

				Eg.: 
				
				docker build -t loksaieta/dcp-build-env:v1.1 .
				
				Docker File Instructions :::
				
				FROM 									# To Identify the Base Image
				RUN 									# To run the package manager
				COPY 									# To Copy the file from host volume to container volume
				CP 										# To Copy the file within the container volumes 
				ADD 									# To Copy the file from Host Volume as well as from URL
				ENV 									# To define the Environment Variable 
				ARG 									# To pass Arguements to the Steps in Dockerfile 
				EXPOSE									# To Define the Container Port 
				WORKDIR									# To set the current working directory within the Container 
				CMD										# To set the default start-up command to the container 
														  This Command can be changed at run-time.
				ENTRYPOINT								# To set the default start-up command to the container 
														  This Command cannot be changed at run-time.			
					
				Application Artifact ==> mywebappsv1.war_SNAPSHOT_v1.0
				
				Application config File / Properties.file based on the Target Environment
				
				QA 
						
						
						docker run -d centos sleep 20 
						
						FROM centos 
						ENTRYPOINT "sleep"
						CMD 20
						
						docker run -d centos 
						docker run -d centos
						
					vi Dockerfile
					
					FROM tomcat:8.0
					COPY target/*.war /usr/local/tomcat/webapps
					EXPOSE 9090
					
			CICD Pipelines : ==> --> jenkins/github actions/gitlab-ci/az-pipelines/aws code-pipeline / Bamboo
			
				Dev Environment:
					- Create Source Code, Dockerfile
					- Commit the Source Code to Source Code Repositories(Github/Gitlab/Az-Repo/AWS-CodeCommit)
				Build Environment
					- Application Build 		- Compile the Source Code & Create Artifacts (*.war)		- App Build Tools, SRC_Code
					- Application Image Build 	- Build Application Image using Docker (*.war,Dependencies) - Dockerfile
					- Push the Application Container Image to Container Registry. 
				Target - QA/UAT/PROD Environments
					- Pull Application Container Image from Container Registry. 
					
			Push the Images to DockerHub :
			
			
			- Login to DockerHub thru docker cli using DockerHub Login ID and Access Token 
				
				
				- Create Access Token in DockerHub 
				
					- docker login -u <login_id>
				
					- Enter the Access Token 
					
					Eg.: 
					
						docker login -u lokssaaieta
						
						dsdfgsdfgdfgsdfg
						
						
			- docker push <image_name> 
			
				Eg.: 
				
					docker push loksaieta/dcp-build-env:v1.0
				
				docker run --name=devuser1 ubuntu

			vi Dockerfile
			
			FROM tomcat:8.0
			COPY target/*.war /usr/local/tomcat/webapps
			EXPOSE 9090


		CICD - Pipeline Stages :
		
			Stage1: SCM_Checkout 
					git clone "https://github.com/Edu-Docker-Cert/java-mvn-springbootapp.git"
			
			Stage2: Application_Build 
					mvn "clean package"
					
						# mvn package -> compile, test, create artifacts(*.war) 
						# mvn test 	  -> compile, test
						# mvn compile -> compile 
			
			Stage3: Application Container Image Build 
					docker Build <> .
				
				docker run -it -p 9090:8080 loksaieta/appsv1:v1.0
	
	
	Docker :::
						
	Container Orchestration Tools ::::

		--> Is to orchestrate and ensure high availability of Containers 
		
		
		
		--> docker compose 	:::
		
				- Docker Compose is an extension to Docker Engine.
				- Is used to run multiple Containers as a Service.
				- Create a manifest file using *.yaml Script
		
		--> docker swarm / kubernetes  :::
				- To Ensure high availabililty
				
				- Docker Swarm :				
					- To Ensure high availabililty by creating replicas of containers					
					- Auto-Scaling is not support in Docker Swarm 
					- Load-Balancing is not support in Docker Swarm 		
		
				- Kubernetes :
					- To Ensure high availabililty by creating replicas of containers
					- Auto-Scaling
					- Load-Balancing

					
		--> docker networking 
				- Port Mapping / Binding 
				- Container to Container Communication 


		
		E_Commerce Portal :
		
		Sign_In-Page :
		
		- 3 - Tier Application Services
		
			- Front-End				# User Interaction 	--> C1.1,C1.2,C1.3 
				
			- Application Layer		# Business Logics 	--> C2.1,C2.2,C2.3 
			
			- Back-End Layer		# Data_Base			--> C3.1,C3.2,C3.3  
			
			
		Production Environments:
		
			Production Server1,2,3,4,5
	
			C1.1,C1.2,C1.3 


  145  docker images
  146  pwd
  147  mkdir docker-contents
  148  cd docker-contents/
  149  vi Dockerfile
  150  docker build -t loksaieta/dcp-build-env:v1.1 .
  151  docker images
  152  docker history loksaieta/dcp-build-env:v1.1
  153  docker history ubuntu
  154  docker ps
  155  docker ps -a
  156  clear
  157  docker ps -a
  158  docker exec -it c747f7c2a375 bash
  159  docker start c747f7c2a375
  160  docker exec -it c747f7c2a375 bash
  161  docker images
  162  clear
  163  docker images
  164  echo $PATH
  165  docker login -u lokdfsdfsd
  166  docker push loksaieta/dcp-build-env:v1.0
  167  docker ps -a
  168  clera
  169  clear
  170  docker ps -a
  171  docker rm ad55358144f2 5dd530a7aa36 e9dac7997b1e c02992fc7b42 20855a5cccaa 1b033a2d6b46 f13ea1121c21 c747f7c2a375
  172  docker ps
  173  docker stop c747f7c2a375
  174  docker rm c747f7c2a375
  175  docker ps
  176  docker ps -a
  177  docker images
  178  docker run --name=devuser1 ubuntu
  179  docker ps -a
  180  clear
  181  git --version
  182  mvn --version
  183  cd ~
  184  apt update -y
  185  apt install openjdk-17-jre -y
  186  java --version
  187  apt install maven -y
  188  mvn --version
  189  ls
  190  mkdir project1
  191  cd project1/
  192  git clone https://github.com/Edu-Docker-Cert/java-mvn-springbootapp.git
  193  ls
  194  cd java-mvn-springbootapp/
  195  ls
  196  cat Dockerfile
  197  mvn clean package
  198  ls
  199  cd src/
  200  ls
  201  cd test/
  202  ls
  203  cd ..
  204  pwd
  205  ls
  206  cd target/
  207  ls
  208  docker images
  209  cd ..
  210  pwd
  211  cat Dockerfile
  212  pwd
  213  docker build -t loksaieta/appsv1:v1.0 .
  214  docker images
  215  clear
  216  docker images
  217  docker run -it loksaieta/appsv1:v1.0 bash
  218  docker run -it -p 9090:8080 loksaieta/appsv1:v1.0 bash
  219  docker run -it -p 9090:8080 loksaieta/appsv1:v1.0
  220  clear
  221  history


	
########################
Day - 5  11th Jan. 2024
########################	
	
	
	Automate Docker Application build using Build Orchestration Tools :
	
		CICD - Pipeline Stages :
		
			Stage1: SCM_Checkout 
					git clone "https://github.com/Edu-Docker-Cert/java-mvn-springbootapp.git"
			
			Stage2: Application_Build 
					mvn "clean package"
					
						# mvn package -> compile, test, create artifacts(*.war) 
						# mvn test 	  -> compile, test
						# mvn compile -> compile 
			
			Stage3: Application Container Image Build 
					docker Build <> .
				
				docker run -it -p 9090:8080 loksaieta/appsv1:v1.0
				
				
				
	CI/CD Pipeline :::
	
		Continuous Integration / Continuous delivery/Deployment


	CI/Cd 
	
	CI/CD 
	
	Build Orchestration Tools :::
	
		- Jenkins 
		- Azure Pipelines
		- gitlab-ci 
		- github Actions 
		- AWS CodePipelines 
		- Bamboo
		
	
	1. Source Code Repository 
	
	2. Application Build Process & Dependencies 
	
	3. Application Image Build 
	
	4. Push the Application Image to Container Registry 
	
	5. Deploy to Kubernetes Cluster(Target Environment - QA/UAT/PROD)
	
	
	Jenkins :::
	
	Architecture of Build Orchestration Tools ::
	
		- Master/Slave Architecture :::		
		
		Jenkins_Master :	Used Create Jenkins CI/CD Pipeline Projects & Schedule to run in the Build environment(Jenkins  SlaveNodes)	
		
			Jenkins_Slave1(Build Environment)	: 	Used to build Application Build and Image Build
													Push the Application image to Container Registry



		Tools :		
		
			Jenkins_Master 							:: Install jdk/git/jenkins				
				Jenkins_Slave1(Build Environment)	:: Install jdk/git/maven/Docker Engine		


		Environments :::
		
			DEV 
			
			Build
			
			Target Environments :(Docker Swarm/Kubernetes)
				Test 				
					QA 					
					UAT 
		
				Prod 					
					Prod_Servers
					
					
	Architecture of Container Orchestration Tool :::
	
		Production Environments: LIVE 
		
			Production Server1,2,3,4,5
			
			
		Kubernetes/Docker Swarm :
		
			Kubernetes Master_Node :	Used to Prepare the Pods(Containers) & Schedule the deployments.
			
				Worker_Node1,2,3,4,5(Target_Server)
			
			
		Non-Prod Kubernetes Cluster					

			Kubernetes Master_Node :	Used to Prepare the Pods(Containers) & Schedule the deployments.
			
				Worker_Node1,2,3,4,5(Target_Server - QA/UAT)			
		
		
		Prod Kubernetes Cluster 
			
			Kubernetes Master_Node :	Used to Prepare the Pods(Containers) & Schedule the deployments.
			
				Worker_Node1,2,3,4,5(Target_Server - LIVE)
				
				
		End-to-End CI/CD Pipeline ::
			
			1. Source Code Repository 
			
			2. Application Build Process & Dependencies 
			
			3. Application Image Build 
			
			4. Push the Application Image to Container Registry 
			
			5. Deploy to Kubernetes Cluster(Target Environment - QA/UAT/PROD)		



	Servers ::
	
		Create :
		
			Jenkins_Master 				::	Used Create Jenkins CI/CD Pipeline Projects & Schedule to run in the Build environment		
				Jenkins_Slave1 			::  Used to build Application Build and Image Build & Publish the Images to Container Registry
				
			Kubernetes_Master 			::	Prepare and Schedule the Pods(Containers) for Deployment
				Kubernetes_WorkerNode1
				Kubernetes_WorkerNode2
				Kubernetes_WorkerNode3  				
			
			
			t2.micro --> 1GB/1CPU
			
			t2.medium --> 4GB RAM/2 CPUs
				Jenkins Container 
				Jenkins Build Environments
				
				
				
				
				
			Jenkins_Master & Slave Communication is based on SSH Connection :
			
				Host_Name 
				User_Name 
				
				Authentication Type:
				
					Password Based Authentication
					Token Based Authentication
					Key Based Authentication
						- Public Key / Authorized Key
						- Private Key 						
					Passwordless Authentication
			
		Create CICD Pipeline :
		
	
		CICD - Pipeline Stages :
		
			Stage1: SCM_Checkout 
					git clone "https://github.com/Edu-Docker-Cert/java-mvn-springbootapp.git"
			
			Stage2: Application_Build 
					mvn "clean package"
					
						# mvn package -> compile, test, create artifacts(*.war) 
						# mvn test 	  -> compile, test
						# mvn compile -> compile 
			
			Stage3: Application Container Image Build 
					docker Build <> .
				
				docker run -it -p 9090:8080 loksaieta/appsv1:v1.0		
			
		
pipeline {
    
    agent { label 'slave1' }


	environment {	
		DOCKERHUB_CREDENTIALS=credentials('dockerloginid')
	}
	
    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perform SCM Checkout'
				git 'https://github.com/Edu-Docker-Cert/java-mvn-springbootapp.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Application Build'
                sh 'mvn clean package'
                
            }
        }
        stage('Build Docker Image') {
            steps {
				sh "docker build -t loksaieta/dcp-jan11-appimg:${BUILD_NUMBER} ."
				sh 'docker image list'
				sh "docker tag loksaieta/dcp-jan11-appimg:${BUILD_NUMBER} loksaieta/dcp-jan11-appimg:latest"
            }
        }
		stage('Login2DockerHub') {

			steps {
				sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
			}
		}		
		stage('Publish_to_Docker_Registry') {
			steps {
				sh "docker push loksaieta/dcp-jan11-appimg:latest"
			}
		}
    }
}				
				
				
	Container Orchestration Tool :::
	
	--> docker compose 	:::
	
			- Docker Compose is an extension to Docker Engine.
			- Install Docker Compose as a external package
			- Is used to run multiple Containers as a Service.
			- Create a manifest file using *.yaml Script
			
		
	--> 3 - Tier Application Services
	
		- Front-End				# User Interaction 	--> C1
			
		- Application Layer		# Business Logics 	--> C2
		
		- Back-End Layer		# Data_Base			--> C3		
	
	
	---> /home/devopsadmin/workspace/Edu-pipeline/ ls

	
Next :::
		
	- Install Docker Compose :::		https://docs.docker.com/compose/install/linux/#install-the-plugin-manually
	
	- Docker Compose Manifest File 
	
	- Execute Multiple Containers as a Service!
	
	
	

########################
Day - 6  12th Jan. 2024
########################	




# Manual Installation of Docker Compose :::
			
DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
mkdir -p $DOCKER_CONFIG/cli-plugins
curl -SL https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose

chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
	
docker compose version

vi docker-compose.yaml



### Yaml Files are based on Keys & Values -- key:value Pairs

version: '3'
services:
  webserv1:
    image: "tomcat:8.0"
    ports:
      - 8098:8080
  dbserv1:
    image: "redis:alpine"
	
docker compose up 						# Create and Start all the Containers based on the Service Definition Manifest file

docker compose down 					# Down all the Containers based on the Service Definition Manifest file


Docker Swarm / Kubernetes

	- Replicas -> 5 replicas of Containers  is the desired state
	
	
		--> docker swarm / kubernetes  :::
				- To Ensure high availabililty
				
				- Docker Swarm :				
					- To Ensure high availabililty by creating replicas of containers
					- Docker Swarm is used to handle only Docker Container 
					- Auto-Scaling is not support in Docker Swarm 
					- Load-Balancing is not support in Docker Swarm 
					- Container instances can deployed in Master_Node as well as in Worker_Nodes


	--> 3 - Tier Application Services
	
		- Front-End				# User Interaction 	--> C1,2,3
			
		- Application Layer		# Business Logics 	--> C4,5,6
		
		- Back-End Layer		# Data_Base			--> C7,8,9

		
					Master_Node :
					
						Worker_Node1,2,3
		
		
		
	docker 		# create application Images --> *.war 
	
	Kubernetes 	# Deploy the Images in all the available target nodes 
	
	Jenkins 	# Build Orchestration Tool 	
	
	
	Kubernetes ::::
	
		- It is a Open-Source Container Orchestration Tool 
		- Kubernetes is used to Deploy any type of Containers.
		- It is used to ensure high availability of the Applications/services running thru Containers.
		- Used to Ensure High Availability of Containers by creating Replicas of Containers.
		- It supports Auto-Scaling & Load Balancing.
		
	Managed Services ::

		AWS 	- ECS/ECR/EKS 
		Azure 	- ACS/ACR/AKS 		
		GCP 	- GCE/GCR/GKE
		
	pods --> In Kubernetes  - Pods are the Atomic unit of Scheduling	
							- Pods are used run the containers 
							- Pod can have one or more containers.
		
	Kubernetes Architecture :::
	
		Kubernetes_Master 			#	Schedule the pods for deployment 
		
			Kubernetes_WorkerNodes 	# 	Application Pods are executed in Worker_Nodes 
									#	Target Servers 
									
	
	Kubernetes Components :::
	
		- API Server 
		- Scheduler
		- ETCD 
		- Controller Manager 
		
		- Kubelet 
		- KubeProxy 
		- CRI - Container RunTime Interface (Container-D)
		
		
		
	
	Kubernetes Concepts/Terminologies :::

		Kubernetes Control Plane 	:	# It referes to Master Node 
		Kubernetes Cluster 			:	# Collection of Workernodes 
		Images 
		Containers 
		kubeadm 
		Pods 		
		kubectl 
		
		Deployment Controller Object 
		
		Kubernetes Services 
		
			- NodePort Service 
			
		Volumes 
			
	End-to-End Pipeline! 
		
		
	Install and Configure Kubernetes Master & Worker Nodes!
	
	
	Namespace :::
		- Logical Partition of the Kubernetes Cluster
		
		
	
	Kubernetes_Master 
	
		Kubernetes_Master1							AWS 
			Cluster1 :								Region1		
				Kubernetes Worker_Node1
				Kubernetes Worker_Node2
				Kubernetes Worker_Node3
				Kubernetes Worker_Node4
		
			Cluster2 :								Region2
				Kubernetes Worker_Node1
				Kubernetes Worker_Node2
				Kubernetes Worker_Node3
				Kubernetes Worker_Node4	
			
		Kubernetes_Master2							Azure 
			Cluster1 :								Region1		
				Kubernetes Worker_Node1
				Kubernetes Worker_Node2
				Kubernetes Worker_Node3
				Kubernetes Worker_Node4
		
			Cluster2 :								Region2
				Kubernetes Worker_Node1
				Kubernetes Worker_Node2
				Kubernetes Worker_Node3
				Kubernetes Worker_Node4		


########################
Day - 7  18th Jan. 2024
########################
	
	
	Docker CC Edition 
	
	
	Docker EP Edition

	
	Kubernetes ::::
	
		Manual Setup of all Monitoring Tools ::::
		
		
	EP		: 
	
	AWS 	: 	ECS(Docker Engine) 	/ ECR(DockerHub) 	/ EKS(Open-Source Kubernetes) 
	
				Create App Images 	/ Save App Images	/ Deploy the App Images
				
				
	Docker Enterprise Edition :
	
				Docker Engine 
					- GUI Based 
				Docker Swarm 	
				
				
	Azure 	: 	ACS / AKS 
	
	GCP 	: 	GCE / GKE
	
	Kubernetes Concepts/Terminologies :::

		Kubernetes Control Plane 	:	# It referes to Master Node 
		Kubernetes Cluster 			:	# Collection of Workernodes 
		Images 
		Containers 
		kubeadm 
		Pods 		
		kubectl 
		
		Deployment Controller Object 
		
		Kubernetes Services 
		
			- NodePort Service 
			
		Volumes 
		
	- Pods 
	
	- Kubernetes Service :
		- NodePort Service 
			# Used to Expose the Pods to Internet
			# Node Port assign port range : 30000 to 32767 
			# Using <External_IP_Address>:<Node_port_Number>
			
		13.126.84.79:32384
		
	- Controller Objects :
		- Replication Controller 
		- Replicaset 
		
		Replication Controller & Replicaset :::
		
			- Both are used to deploy specific no. of pods. 
			- Replicaset is a enhanced version of Replication Controller 
			- To Scale-up / Scale-Down the pod instances 
			
			
			5 Replicas of Pods 
			
		
		- Deployment Controller Object :::
			
			--> It is used to deploy the pods and ensure high availability of pods by creating pod replicas 
			--> 1. Create Multiple instance/replicas/copies of pods 
				2. Used to Scale-Up / Scale-Down the Pods 
				3. Used to Upgrade the application pods 
				4. Used to Down-grade/roll-back the application pods
			--> The upgrade/down-grade of application pods can be done without any downtime. 
			--> To achieve zero-downtime during upgrade/down-grade, By Default, it used Rolling-Update Deployment Strategy.
			
			--> Deployment Object 
			--> Replicaset
			--> Pod Instances 
			
		Scenario ::
		
			--> webappimg:v1.0									--> webappimg:v1.1
			
			--> replicas : 3 
			
				pod1 --> webappimg:v1.0
				pod2 --> webappimg:v1.0
				pod3 --> webappimg:v1.0
			
			Using Rolling-Update Deployment Strategy.
			
			--> webappimg:v1.1
			
				pod1 --> webappimg:v1.2
				pod2 --> webappimg:v1.1				
				pod3 --> webappimg:v1.1
		
	- Kubernetes Volumes 
	
		- To Maintain the Persistant data.
		
		- Hostpath 		# Same like Container Volume 
						# volume path is created at the pod level 
						# used to send files in and out of pods 
		
		
		- ConfigMaps 
		- Secrets 
		
		- Both ConfigMaps and Secrets Volumes are used to pass the config files to pods from kubernetes Cluster
		
			ConfigMaps 		-- Used to send some usual / property files to pods 
		
			Secrets 		-- Used to send some sensitive files to pods 
							-- Data is encrypted. It cannot be accessible outside the pod. 
			
Next :::
			
		- Overview of PV & PVC :::
	
		- Namespaces 
		
		- Create and Deploy the Pods in Kubernetes Cluster using Jenkins!
